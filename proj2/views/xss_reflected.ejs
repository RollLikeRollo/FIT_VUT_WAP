<!DOCTYPE html>
<html lang="en" class="html">
    <!-- <script src="/api/session-p.js" defer></script> -->
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title><%- title.title %> | <%- title.subtitle.xss %></title>
        <link rel="stylesheet" href="/styles/xss.css">
        <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
        <script src="/api/xss_fade.js"></script>
    </head>
    <body class="body">
        <div class="page-wrapper">
            <header class="title">
                <h1 class='title-text'><%= title.title %></h1>
                <img class='title-logo' src= <%-fitlogo%>   alt="FIT">
            </header>
            <p id='session-p' style='text-align:end' ></p>
            <nav>
                <ul class='topnav'>
                    <li><a href="/">Home</a></li>
                    <li><a class="active"  href="/xss">XSS</a></li>
                    <li><a href="/clickjacking">Clickjacking</a></li>
                    <li><a href="/csrf">CSRF</a></li>
                    <li style="float:right"><a href="/about">About</a></li>
                </ul>
            </nav>
            <main class="main">
                <div class="xss-wrapper">
                    <div class="xss-wrapper-left">
                        <h2>Reflected XSS</h2>
                        <p>
                            Reflected XSS is a type of XSS attack where
                            the malicious code is sent to the server
                            in the form of a request. The server then
                            reflects the malicious code back to the user. 
                            It is the simpler version of XSS attack.
                        </p>
                        <p>
                            Attacker then sends a malicious link with the
                            reflected XSS to a victim who believes it to be
                            the original website. The code is often visible
                            in the URL of the page, so more observant users
                            may not be fooled.
                        </p>
                        <h3>The lab</h3>
                        <p>
                            In this left column, you'll see a lab instructions.
                            In the right column, you'll have to try to carry out
                            a reflected XSS attack.
                        </p>
                        <ul>
                           <li class="fadeMe" id="li_1">
                               Play around with the input field and see what happens.
                               <p>
                                    Look for the URL in the address bar. You'll see that
                                    the input is reflected both in the URL and in the 
                                    "Your last search" message.

                                    Try to change the URL query parameter to something
                                    else. You'll see that the message changes as well.
                               </p> 
                               <button class="reverse" onclick="fade(0)"> Next </button>
                           </li>
                           <li class="fadeMe" id="li_2" hidden>
                            Ask yourself: what happens if you put a script tag in the input field?
                            <p>
                                Does the script run or does the website block it by
                                escaping, sanitizing or filtering the input?
                            </p> 
                            <p>
                                If the script runs, you've discovered a reflected XSS vulnerability
                                in this site.
                            </p>
                            <p>
                                Hint: <br/>
                                <code>
                                    &lt;script&gt;alert('Hello World!')&lt;/script&gt;
                                </code>
                            </p>
                            <button class="reverse" onclick="fade(1)"> Next </button>
                        </li>
                        <li class="fadeMe" id="li_3" hidden>
                            <p>
                                Now you can craft a malicious link with a script and send it to a victim.
                                The script ccan steal users cookies, redirect them to a malicious site,
                                show them a fake login page, or anything else you can think of.
                            </p>
                            <p>
                                Try to craft a malicious link which will redirect the victim to a REALLY DANGEROUS
                                MALICIOUS site.
                            </p>
                            <p>
                                Hint: <br/>
                                <code>
&lt;script&gt;
var last_elem_body = document.getRootNode().<br/>lastChild.lastChild.lastChild;
var rickroll = document.createElement("iframe");
rickroll.setAttribute("src", "https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1");
rickroll.setAttribute("width", "500");
rickroll.setAttribute("height", "500");
rickroll.setAttribute("frameborder", "0");
rickroll.setAttribute("allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
rickroll.setAttribute("allowfullscreen", "");
last_elem_body.appendChild(rickroll);
&lt;/script&gt;
                                </code><br/>

                                Now copy the link and send it to anyone!
                            </p>
                            <button class="reverse" onclick="fade(2)"> Defense strategies </button>
                        </li>
                        <div class="fadeMe" id="li_4" hidden>
                            <h4> Defense Strategies</h4>
                            <ul>
                                <li>Encode data at output</li>
                                <ul>
                                    In HTML
                                    <li>&lt; converts to: &amp;lt;</li>
                                    <li>&gt; converts to: &amp;gt;</li>
                                    In JavaScript
                                    <li>&lt; converts to: \u003c</li>
                                </ul>
                                <li>Validate input on arrival</li>
                                <li>Use a template engine or library built in safety features</li>
                                <li>Use a Content Security Policy (CSP) - HTTP headers</li>
                            </ul>
                            <p>
                                Look at the OWASP XSS Prevention page and PortSwigger for more information:
                                <ul>
                                    <li><a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html">WSTG - v4.1 Testing for Reflected Cross Site Scripting</a></li>
                                    <li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">PortSwigger - Reflected XSS</a></li>

                                </ul>
                            </p>
                            <button class="reverse" onclick="fade(3)"> Back to start </button>
                        </div>
                        </ul>
                    </div>
                    <div class="xss-wrapper-right">
                        <div class="example-frame-cls">
                            <iframe src="/xss_reflected/frame" frameborder="0"></iframe>
                        </div>
                    </div>
                </div>
            </main>
            <%- include('./_footer'); %>
        </div>
    </body>
</html>